private double GSS(double a, double b, double c, double[] x, double[] dir, Polynomial P) {
		
		//System.out.println("Recursed!" + a + " "  + c + " " + b);
		
		double stepSize;
		
		if (Math.abs(b - a) < this.delta) {
			
			// if interval is too small
			
			stepSize = (b - a)/2;
			
		}
		
		/*
		if (P.f(vec(x, dir, a)) >= P.f(vec(x, dir, b))) {
		
            return b;
            
        }
        
        if (P.f(vec(x, dir, a)) < P.f(vec(x, dir, b))) {
        
            return a;
            
        }
		*/
		
		else {
			
			if ((Math.abs(c - a)) > Math.abs(b - c)) {
				
				// if [a,c] is the larger interval
				
				double y = a + ((c - a)/this.PHI);
				//System.out.println("y_left: " + y);
				
				if (P.f(vec(x, dir, y)) < P.f(vec(x, dir, a)) && P.f(vec(x, dir, y)) < P.f(vec(x, dir, c))) {
					
					// if fy is less than both endpoints
					stepSize = this.GSS(a, c, y, x, dir, P);
				}
				
				/*
				else if (P.f(vec(x, dir, y)) > P.f(vec(x, dir, a)) && P.f(vec(x, dir, y)) > P.f(vec(x, dir, c))) {
					
					// if fy is greater than both end points
					
					if (P.f(vec(x, dir, a)) >= P.f(vec(x, dir, c))) { return c; }
					
					else { return a; }
				}
				*/
				
				else {
					
					// if fy is greater than one end point
					stepSize = this.GSS(y, b, c, x, dir, P);
				}
			}
			
			else {
				
				// if [c,b] is the larger interval
				double y = b - ((b-c)/this.PHI);
				//System.out.println("y_right: " + y);
				
				if (P.f(vec(x, dir, y)) < P.f(vec(x, dir, c)) && P.f(vec(x, dir, y)) < P.f(vec(x, dir, b))) {
					// if smaller than both end points
					stepSize = this.GSS(c, b, y, x, dir, P);
					
				}
				/*
				else if (P.f(vec(x, dir, y)) > P.f(vec(x, dir, c)) && P.f(vec(x, dir, y)) > P.f(vec(x, dir, b))) {
					
					// if larger than both end points
					
					if (P.f(vec(x, dir, c)) >= P.f(vec(x, dir, b))) { return b; }
					
					else { return c; }
					
				}
				*/
				else {
					// if larger than one end point
					stepSize = this.GSS(a, y, c, x, dir, P);
					
				}
			}	
		}
			
		return stepSize;
	}